/**
 * Template for robot driving lab exercises. This template just periodically switches between a
 * STOPPED and a DRIVING mode, updating the LCD display on each change of mode.
 */
target uC;

import Display from "lib/Display.lf"
  
preamble {=
  typedef enum {
    STOPPED,
    DRIVING
  } RobotState;
=}

reactor Robot {

  input drive: bool             // Toggle mode.
  output notify: DisplayString  // Notify of mode change.
  state robot_state: RobotState 

  reaction(startup) -> notify {=
    self->robot_state = STOPPED;
    lf_set(notify, "INIT");
  =}

  reaction(drive) -> notify {=
    RobotState next_state = self->robot_state;
    switch(self->robot_state) {
      case STOPPED:
        if (drive->value) {
          next_state = DRIVING;
          lf_set(notify, "DRIVING");
        }
        break;
      case DRIVING:
        if (!drive->value) {
          next_state = STOPPED;
          lf_set(notify, "STOPPED");
        }
        break;
    }
    self->robot_state = next_state;
  =}
}

main reactor {
  timer t(0, 2 sec)
  state drive: bool = false
  robot = new Robot()
  display = new Display()
  robot.notify -> display.line0

  reaction(t) -> robot.drive {=
    lf_set(robot.drive, self->drive);
    // Toggle the drive state variable for next time.
    self->drive = !self->drive;
  =}
}
